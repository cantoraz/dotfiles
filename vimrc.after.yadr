" This configuration file cooperates with YADR!
" Extracted settings from .vimrc in my own dotfiles
"
" Title: Cantoraz's vimrc
" Author: Cantoraz Chou
" License: GPLv3
" Date: Mon, 2012-05-28 20:31:13 CST

" ==================== Vundle - Manage our vim plugins ====================
set nocompatible  " be iMproved
filetype off      " required!
set rtp+=$HOME/dotfiles/_vim/bundle/vundle/
call vundle#rc('$HOME/dotfiles/_vim/bundle/')

" The plug-in manager for Vim. Here let Vundle manage Vundel
Bundle 'gmarik/vundle'
" ========== general ==========
" Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc)
" Bundle 'vim-scripts/taglist.vim'
" Eclipse like task list
" Bundle 'vim-scripts/TaskList.vim'
" ========== color schemes ==========
" A slightly-modified desert theme, for 88- and 256-color xterms.
Bundle 'desert256.vim'
" A port of the Railscasts Textmate theme to Vim (GUI Only)
Bundle 'jpo/vim-railscasts-theme'
" A color scheme that imitates the Twilight theme for TextMate
Bundle 'twilight256.vim'
" A low-contrast color scheme for Vim. 
Bundle 'Zenburn'
" ========== coffee script ==========
" Collections of snippets for CoffeScript
Bundle 'carlosvillu/coffeScript-VIM-Snippets'
" ========== css ==========
" Add CSS3 syntax support to vim's built-in `syntax/css.vim`.
Bundle 'hail2u/vim-css3-syntax'
" Highlight colors in css files
Bundle 'skammer/vim-css-color'
" ========== nginx ==========
Bundle 'evanmiller/nginx-vim-syntax'
" ========== python ==========
" Run py.test test's from within vim 
"Bundle 'alfredodeza/pytest.vim'
" pydoc integration for the best text editor on earth
"Bundle 'fs111/pydoc.vim'
" Pathogen compatable ropevim plugin. Dont need install rope libs in system.
"Bundle 'klen/rope-vim'
" Underlines and displays errors with Python on-the-fly.
" An improved pyflakes module is INCLUDED with this plugin,
" so you don't need to install it separately
" Bundle 'mitechie/pyflakes-pathogen'
" Generic test runner that works with nose
"Bundle 'reinh/vim-makegreen'
" Pathogen compatable ropevim plugin. Dont need install rope libs in system.
"Bundle 'sontek/rope-vim'
" Tab-complete your Python code
"Bundle 'vim-scripts/Pydiction'
" An alternative indentation script for python
" Bundle 'vim-scripts/indentpython.vim'
" Check your python source files with PEP8
"Bundle 'vim-scripts/pep8'
" Bundle 'vim-scripts/python.vim--Vasiliev'
" Bundle 'vim-scripts/python.vim'
" ========== ruby ==========
" switch Ruby versions from inside Vim
" Bundle 'tpope/vim-rvm'
" ========== tmux ==========
" tmux syntax
" Bundle 'tsaleh/vim-tmux'
Bundle 'acustodioo/vim-tmux'

" ==================== Pathogen - organize our vim plugins out of Vundle ====================
" Load pathogen with docs for all plugins
call pathogen#infect('$HOME/dotfiles/_vim/nobundle')
call pathogen#helptags()

" ==================== General Settings ====================
filetype plugin indent on   " required! Trye to detect filetypes. Enable loading indent file for filetype
set helplang=cn             " Enable help in Chinese language

  " ==================== File Reading/Writing ====================
  " set modeline               " Allow vim options to be embedded in files;
  " set modellines=5           " they must be within the first or last 5 lines.
  set noautowrite             " Never write a file unless I request it.
  set noautowriteall          " NEVER.
  set noautoread              " Don't automatically re-read changed files.
  set ffs=unix,mac,dos        " Try recognizing dos, unix and mac line endings.
  let &termencoding=&encoding " Encoding detection
  set fencs=ucs-bom,utf-8,cp936,euc-cn,cp950,big5,euc-tw,default,latin0

  " ==================== Display ====================
  syntax enable             " syntax highlighting
  set numberwidth=1         " using only 1 column (and 1 space) while possible
  " set background=dark      " We are using dark background in vim
  set cursorline            " have a line indicate the cursor location
  set listchars=tab:│┈,eol:↵,trail:·,extends:>,precedes:<,nbsp:˽
  " set listchars=tab:>-,eol:$,trail:-,precedes:<,extends:>
  " set listchars=tab:▸\ ,eol:↵

  if has('gui_running')
    " colorscheme railscasts
    " set guicursor+=a:blinkon0
    if has("gui_macvim")
      " MacVim
      set guifont=Menlo:h14
      " set lines=999
      " set columns=84
      let macvim_skip_cmd_opt_movement = 1
    elseif has("gui_gtk2")
      " GTK+2
      set guifont=DejaVu\ Sans\ Mono\ 12
      " set lines=50
      " set columns=84
    endif
  else
    " colorscheme twilight256
  endif

  if exists("&colorcolumn")
    set colorcolumn=80
  endif

  " ==================== Messages/Info/Status ====================
  "set vb t_vb=        " Disable all bells. I hate ringing/flashing.
  set title           " show title in console title bar
  set ruler           " show the cursor position all the time
  set shortmess+=a    " Use [+]/[RO]/[w] for modified/readonly/written.
  set laststatus=2    " Always show status line, even if only 1 window.
  set report=0        " : commands always print changed line count.
  set confirm         " Y-N-C prompt if closing with unsaved changes.
  set wildignore+=.git
  set wildignore+=.hg
  set wildignore+=.svn
  set wildignore+=*.so
  set wildignore+=*.pyc

  " 缓冲区号 文件名 行数 修改 帮助 只读 编码 换行符 BOM
  " ======== 字符编码 位置 百分比位置
  " set statusline=%n\ %<%f\ %LL\ 
  "       \%{&modified?'[+]':&modifiable\|\|
  "       \&ft=~'^\\vhelp\|qf$'?'':'[-]'}%h%r
  "       \%{&fenc=='utf-8'\|\|&fenc==''?'':'['.&fenc.']'}
  "       \%{&ff=='unix'?'':'['.&ff.']'}
  "       \%{&bomb?'[BOM]':''}%{&eol?'':'[noeol]'}
  "       \%=
  "       \%{exists('$rvm_path')?rvm#statusline():''}
  "       \%{fugitive#statusline()}
  "       \\ 0x%-4.4B\ \ \ \ %-14.(%l,%c%V%)\ %P
  " set statusline=%<%f\ (%{&ft})
  "       \%=
  "       \%-19(%3l,%02c0%03V%)
  "       \%{fugitive#statusline()}

  " ==================== Moving/Editing ====================
  set nostartofline         " Avoid moving cursor to BOL when jumping around
  set scrolloff=3           " Keep 3 context lines above and below the cursor
  set virtualedit=block     " Let cursor move past the last char in <C-v> mode
  set showmatch             " Briefly jump to a paren once it's balanced
  set matchtime=2           " (for only .2 seconds)
  set matchpairs+=<:>       " show matching <> (xml/html mainly) as well
  set foldlevel=99          " don't fold by default

  " ==================== Indentation ====================

  " ==================== Completion ====================
  " set pumheight=20        " Keep a small completion window

  " ==================== Searching/Patterns ====================
  set ignorecase          " Default to using case insensitive searches,
  set smartcase           " unless uppercase letters are used in the regex.

" ==================== FileType Setting ====================
  " ==================== C ====================
  au FileType c setlocal ts=4 sts=4 sw=4 et ai sta

  " ==================== CSS ====================

  " ==================== CSS/LESS ====================
  "
  " ==================== HTML ====================
  au FileType html,xhtml setlocal ts=2 sts=2 sw=2 noet ai sta

  " ==================== Javscript ====================

  " ==================== PHP ==================== 
  au FileType php map <buffer> <F11> <Esc>:update<CR>:!/usr/bin/env php %<CR>

  " ==================== Python ==================== 
  au FileType python map <buffer> <F11> <Esc>:update<CR>:!/usr/bin/env python %<CR>
  au FileType python map <buffer> <S-F11> <Esc>:update<CR>:!/usr/bin/env python -m pdb %<CR>

  " ==================== RSpec ====================

  " ==================== Ruby ====================

  " ==================== Plugins for Ruby ====================
    " ==================== Vim-Ruby ====================
    autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_include_object = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_include_objectspace = 1

  " ==================== Vim ====================

" ==================== General Plugins ====================
  " ==================== delimitMate" ====================
  let delimitMate_expand_cr = 1
  let delimitMate_expand_space = 1

  " ==================== NerdTree tabs ====================
  let g:nerdtree_tabs_open_on_gui_startup = 0

" ==================== Functions ====================

" ==================== Key Mapping ====================
" Note: Do not map <C-S>, <C-Q> or <C-unprintable>

" Autocomplete
" imap <F2> <C-X><C-O>

" Quick to <C-W>
" nmap ' <C-W>

" Quick to shell command
nmap :: :!

" Quick to comman
nnoremap ;; :

" " Disable Ex mode key mappings
nmap gQ <Nop>
omap gQ <Nop>

" " Ctrl-c to jank/copy, Ctrl-v to paste
" map <C-C> "+y
" map <C-V> "+p

" Move line
nmap <S-Up> mz:m-2<cr>`z
nmap <S-Down> mz:m+<cr>`z
vmap <S-Up> :m'<-2<cr>`>my`<mzgv`yo`z
vmap <S-Down> :m'>+<cr>`<my`>mzgv`yo`z

" New line above/below
imap <S-CR> <Esc>O
imap <C-CR> <Esc>o

" Folding
" nnoremap <Space> za

" Seriously, guys. It's not like :W is bound to anything anyway.
" command! W :w

" brings up my .vimrc
" map <silent> <leader>v :e ~/.vimrc<CR>
" reloads .vimrc -- making all changes active (have to save first)
" map <silent> <leader>V :source ~/.vimrc<CR>:echo 'vimrc reloaded.'<CR>

" Change working directory
" nnoremap <silent> <leader>. :lcd %:p:h<CR>:echo expand('%:p:h')<CR>

" Toggle line numbers and fold column for easy copying
nnoremap <leader>nu :set nonumber!<CR>:set foldcolumn=0<CR>

" ==================== EOF ====================
